(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{651:function(s,e,n){"use strict";n.r(e);var a=n(15),t=Object(a.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p",[s._v("对象在Javascript编程中经常被用作映射和集合，但是却收到对字符串约束的限制。另外由于对象正常都会继承带名字的属性（如toString）等属性，这些属性也很明显不是为集合和映射准备的。\n为此，ES6添加了真正的Set和Map类，接下来进行解析。\n代码内的注释 "),n("strong",[s._v("！代表提示 => 模拟控制台输出")]),s._v("\n#一、Set类\n#####什么是集合")]),s._v(" "),n("blockquote",[n("p",[s._v("集合就是一组值，与数组类似。但与数组不同的是，集合没有索引或顺序，也不允许重复：一个值要么是集合的成员，要么不是；不可能在集合中出现多次")])]),s._v(" "),n("p",[s._v("####1.1 使用Set()构造函数创建集合对象")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let s = new Set(); // ！ 创建一个新的空集合，大小(size)为0\nlet t = new Set([1,s]) // ！ 创建一个新的，有两个成员的集合\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("Set()构造函数的参数必须上一个可迭代的对象（也包括其他的集合）")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let str = 'screen'  // ！ 创建字符串\nlet m = new Set(str)  // ！ 创建一个新的集合\nconsole.log(m)  // => {'s', 'c', 'r', 'e', 'n'}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("####1.2 集合不一定要在创建时初始化，也可以使用方法添加或删除元素\n先上例子")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('let s = new Set();  // ！创建一个空集合\ns.add(2)  // => 添加一个数值\ns.add([1,2,3]).add(["a","b","c"]).add("2")  // => 添加两个数组，一个字符串\ns.delete([1,2,3])   // => false 集合中包含放是另一个数值\ns.delete(2)  // => true 删除成功，集合包含数值2\nconsole.log(s.size) // => 3 集合大小\ns.clear()  // => 清空集合\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[n("strong",[s._v("关于这段代码的说明 ↓")])]),s._v(" "),n("ul",[n("li",[n("code",[s._v("add(value)：")]),s._v(" **接收一个参数，将参数添加到集合中；**如果参数是一个数组，它会把数组添加到集合中，而不是数组元素添加到集合里；add(）始终返回调用他的集合。\n如果想添加多个值，可以链缀调用add()；例如↓")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('let s = new Set();\ns.add([1,2,3]).add(["a","b","c"]).add(2)\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("ul",[n("li",[n("code",[s._v("delete(value)：")]),s._v("**删除集合中的一个元素，一次只能删除一个。**delete返回一个布尔值，指定的值确实是一个集合元素，返回true，反之返回false。\n注意点：集合成员是按照严格相等 === 来判断，集合可以是数值1，也可以是字符串 '1'，这两个值不同；如果值是对象（数组、函数）也是 === 来比较。如果想删掉的话，必须传入该“数组”的引用")]),s._v(" "),n("li",[n("code",[s._v("clear()：")]),s._v(" "),n("strong",[s._v("清除集合，没有返回值")])])]),s._v(" "),n("p",[s._v("在实际应用中，使用集合最重要的不是添加或删除元素，而是检查某个值是不是集合成员；使用has()方法。")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("has(value)：")]),s._v("返回一个布尔值来"),n("strong",[s._v("指示对应的值value是否存在Set对象（集合）中")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let s = new Set(['a', 'b'])   // => 创建新集合\nconsole.log(s.has('b'))   // => true 因为有 \"b\" 这个成员\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("集合最重要的是它专门为成员测试做了优化，无论集合内有多少成员，has()方法都非常快。（数组的includes()方法也执行成员测试，但执行速度和数组大小相反，因此用数组作为集合比Set对象慢很多）\n####1.3 Set对象可以迭代，可以使用for...of循环枚举集合所有元素")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let arr = [1,2,3]   // => 创建数组\nlet s = new Set(arr)  // => 创建新集合\nfor(item of s){\n   console.log(item)  // 循环输出 1,2,3\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("####1.4 因为Set是可迭代的，所有可以使用···扩展运算符")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let arr = [1,2,3]   // => 创建数组\nlet s = new Set(arr)    // => 创建新集合\nconsole.log(...s)    // => 1 2 3\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("####1.5 因为Set是可迭代的，也有forEach()方法，与数组类似")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let arr = [1,2,3]\nlet s = new Set(arr)    // => 创建新集合\ns.forEach(function (item) {\n      console.log(item)  // => 1 2 3\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("#二、Map类\nMap对象表示一组被称为键的值，其中每个键都关联着（或映射到）另一个值。映射类似于数组，只不过他不用连续的整数作为键，而是运行任何值作为索引。于数组类似，映射速度也很快（没有通过索引访问数组那么快）\n####2.1  通过Map()构造函数创建映射对象，把关联的键和值写成数组的形式")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('let m = new Map();; // => 创建一个新的空映射\nlet n = new Map([  // 初始化新映射\n     ["one",1],\n     ["two",2]\n])\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("Map()构造函数的参数是一个可迭代的对象，包含两个元素的数组[key,value]键值对。"),n("strong",[s._v("正常使用中，通常把关联的键或值写成数组的数组的形式；也可以使用Map()构造函数复制其他映射，或者从已有的对象复制属性名和值：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('        let n = new Map([    // 初始化新映射\n            ["one",1],\n            ["two",2]\n        ])\n // ! 也可以使用Map()构造函数复制其他映射\n        let copy = new Map(n)  `  // 复制新映射，有和n一样的键和值\n        n.delete("one")  \n// ! 也可以从已有对象复制属性名和值\n        let o = { x:1, y:2 }     // 初始化新对象\n        let p = new Map(Object.entries(o))  // => 相当于 new Map([["x",1],["y",2]])\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("ul",[n("li",[n("code",[s._v("set()")]),s._v(" :  **增加、修改；**与集合的add()方法类似，可以链缀调用")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('n.set("there",4) // => 添加映射键“there”和值4\nn.set("there",3)  // => 修改映射键“there”和值3\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("ul",[n("li",[n("code",[s._v("get()")]),s._v(":  "),n("strong",[s._v("获取；用来查询关联的值")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('console.log(n.get("there"))  // => 输出与there相关的值\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[n("code",[s._v("has()")]),s._v(": "),n("strong",[s._v("判断里面有没有这个值 true / false")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('console.log(n.has("name"))  // => false 判断映射是否有键“name”\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[n("code",[s._v("delete()")]),s._v(" 😗* 删除指定键**")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(' n.delete("two")   // ! ["two",2]，这个键值对被删除了\t\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[n("code",[s._v("clear()")]),s._v(" : "),n("strong",[s._v("清除")]),s._v(" （慎用，和集合的clear一样）")])]),s._v(" "),n("p",[s._v("与集合一样，任何JavaScript值都可以做完映射的键和值，包括null、undefined、NaN以及对象和数组等引用数据类型；也和集合一样，安装全等于 === 而非相等于。\n####2.2 映射对象是可迭代的，迭代的值上一个或两个元素的数组，可跌带也可以使用...扩展运算符")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let n = new Map([   // 初始化新映射\n            [\"one\",1],\n            [\"two\",2]\n        ])\n        console.log([...n]) // => 输出 \n        console.log(...n) // => ['one', 1] (2) ['two', 2]\n        console.log(n)  // => {'one' => 1, 'two' => 2}\n        for(let [key, value] of n){\n            console.log(key, value)\n        }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("集合和映射都是安装插入的先后顺序迭代的，迭代第一个键值对是最早添加到映射中的，最后一个键值对是最晚添加的。\n如果只是想迭代映射的键或关联的值，可以用"),n("code",[s._v("keys()")]),s._v("和"),n("code",[s._v("values()")]),s._v("方法。\n"),n("code",[s._v("keys()")]),s._v(" "),n("strong",[s._v("取出Map里面所有的键")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("console.log(n.keys()) // ! 只会单独取出键\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[n("code",[s._v("values()")]),n("strong",[s._v("取出Map里面所有的值")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("console.log(n.values())\t// ! 只会单独取出值\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("还有一个"),n("code",[s._v("entries()")]),s._v("方法返回所有可迭代对象的键值对\n"),n("code",[s._v("entries()")]),s._v(" ：取出里面所有的键和值  等价于 [...n]")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("console.log(n.entries())\t// ! 全部取出来，和直接打印n差不多，意义不大\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("####2.3 映射同样也实现了forEach()方法")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('let n = new Map([  // 初始化新映射\n            ["one",1],\n            ["two",2]\n        ])\nn.forEach((value,key)=> { \n            console.log(key , value)\n        })\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("注意：是（value,key），与for...of相反。")])])}),[],!1,null,null,null);e.default=t.exports}}]);