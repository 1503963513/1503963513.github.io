(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{645:function(s,n,e){"use strict";e.r(n);var a=e(15),t=Object(a.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"代理基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代理基础"}},[s._v("#")]),s._v(" 代理基础：")]),s._v(" "),e("p",[s._v("介绍：给目标对象定义一个关联的代理对象，而这个代理对象可以作为抽象的目标对象来使用。在对目标对象的各种操作影响目标对象之前，可以在代理对象中对这些操作加以控制。")]),s._v(" "),e("p",[s._v("用作目标对象的替身，但又完全独立于目标对象。目标对象既可以直接被操作，也可以通过代理来操作。")]),s._v(" "),e("h1",{attrs:{id:"创建代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建代理"}},[s._v("#")]),s._v(" "),e("strong",[s._v("创建代理")])]),s._v(" "),e("p",[e("strong",[s._v("代理是使用 Proxy 构造函数创建的。这个构造函数接收两个参数：目标对象和处理程序对象。缺 少其中任何一个参数都会抛出 TypeError。")])]),s._v(" "),e("p",[s._v("默认情况下，在代理对象上执行的所有操作都会无障碍地传播到目标对象。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const target = { // ! 目标对象\n            id: 'target'\n        }\n        const handler = {} // ! 处理程序对象\n        const proxy = new Proxy(target, handler)\n        \n        // id 属性会访问同一个值\n        console.log(target.id); // => target \n        console.log(proxy.id); // => target \n\n        // 给目标属性赋值会反映在两个对象上\n        // 因为两个对象访问的是同一个值\n        target.id = 'foo'; \n        console.log(target.id); // => foo \n        console.log(proxy.id); // => foo \n\n        // 给代理属性赋值会反映在两个对象上\n        // 因为这个赋值会转移到目标对象\n        proxy.id = 'bar'; \n        console.log(target.id); // => bar \n        console.log(proxy.id); // => bar \n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br")])]),e("blockquote",[e("p",[s._v("console.log(target === proxy); // false")])]),s._v(" "),e("ul",[e("li",[e("p",[e("code",[s._v("target")]),s._v("：目标对象")])]),s._v(" "),e("li",[e("p",[e("code",[s._v("handler")]),s._v("：处理程序对象")])])]),s._v(" "),e("p",[s._v("#定义捕获器")]),s._v(" "),e("p",[s._v("使用代理的主要目的就是定义捕获器，主要在处理程序对象中创建“拦截器”。")]),s._v(" "),e("blockquote",[e("p",[s._v("在操作系统中，捕获器是程序流中的一个同步中断，可以暂停程序流，转而执行一段子例程，之后再返回原始程序流。")])]),s._v(" "),e("p",[e("strong",[s._v("定义一个 get()捕获器")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const target = { // 目标对象\n            id: 'target'\n        }\n        const handler = { // 处理程序对象\n            get() {\n                return target change!!!\n            }\n        }\n        const proxy = new Proxy(target, handler)\n        console.log(target.id) // => target\n        console.log(proxy.id)  // => target change!!!\n\n        console.log(target['foo']); // => target\n        console.log(proxy['foo']); // => target change!!!\n\n        console.log(Object.create(target)['foo']); // => target \n        console.log(Object.create(proxy)['foo']); // => target change!!!\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])]),e("p",[s._v("捕获器在处理程序对象中以方法名为键")]),s._v(" "),e("blockquote",[e("p",[s._v("1.当通过代理对象执行 get()操作时，就会触发定义的 get()捕获器。\n2.proxy[property]、proxy.property 或 Object.create(proxy)[property]等操作都 会触发基本的 get()操作以获取属性。\n3.只要这些操作作用于代理对象上，就会触发 get()捕获，在目标对象上仍然是正常的行为")])]),s._v(" "),e("p",[s._v("#捕获器参数")]),s._v(" "),e("p",[e("strong",[s._v("get()")]),s._v(" 捕获器会接收到目标对象、要查询的属性和代理对象三个参数，于这些参数可以重建被捕获方法的原始行为。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const target = {\n            id: 'target'\n        }\n        const handler = {\n            get(IsTarget, property, receiver ) {\n                console.log(IsTarget === target) // => true\n                console.log(property) // => id\n                console.log(receiver=== proxy) // => true\n                \n                /**\n                 * 有了这些参数，我们可以重新处理捕获行为\n                 */\n                return IsTarget[property]\n            }\n        }\n        const proxy = new Proxy(target, handler)\n        console.log(proxy.id) // => target\n        //执行结果\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br")])]),e("ul",[e("li",[e("p",[e("code",[s._v("IsTarget")]),s._v("：目标对象")])]),s._v(" "),e("li",[e("p",[e("code",[s._v("property")]),s._v("： 属性")])]),s._v(" "),e("li",[e("p",[e("code",[s._v("receiver")]),s._v("：代理对象")])])]),s._v(" "),e("p",[s._v("#反射（Reflect）API 方法")]),s._v(" "),e("p",[s._v("捕获器都可以基于自己的参数重建原始操作，实际上、 开发者并不需要手动重建元素行为，而是可以通过调用全局 Reflect 对象（封装了原始行为）的同名方法重建。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const target = {\n            id: 'target'\n        }\n        const handler = { \n         \tget: Reflect.get \n        }; \n        const proxy = new Proxy(target, handler)\n        console.log(target.id) // => target\n        console.log(proxy.id)  // => target\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("#捕获器不变式")]),s._v(" "),e("p",[s._v("根据 ECMAScript 规范，每个 捕获的方法都知道目标对象上下文、捕获函数签名，而捕获处理程序的行为必须遵循“捕获器不变式” （trap invariant）。捕获器不变式因方法不同而异，但通常都会防止捕获器定义出现过于反常的行为。")]),s._v(" "),e("blockquote",[e("p",[s._v("如果目标对象有一个不可配置不可写的数据属性，那么捕获器会抛出TypeErroe")])]),s._v(" "),e("p",[s._v("#可撤销代理")]),s._v(" "),e("p",[e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/revocable",target:"_blank",rel:"noopener noreferrer"}},[e("code",[s._v("Proxy.revocable()")]),e("OutboundLink")],1),s._v("创建一个可撤销的"),e("code",[s._v("Proxy")]),s._v("对象。")]),s._v(" "),e("p",[s._v("作用：中断代理对象和目标对象之间的联系。（new Proxy() 创建的普通代理会在代理对象的什么周期一直持续存在）")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const target = {\n          id: 'target'\n      }\n      const handler = {\n          get(IsTarget, property, receiver ) {\n              return 'handler!!!'\n          }\n          // get: Reflect.get\n      }\n      // ! Proxy.revocable() 可撤销代理对象与目标对象的关联。\n      const { proxy, revoke } = Proxy.revocable(target, handler)\n      console.log(target.id) // => target\n      console.log(proxy.id)  // => handler!!!\n      revoke() // ! 撤销代理\n      console.log(proxy.id) // => TypeError\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br")])]),e("p",[s._v("这种操作是不可逆的")]),s._v(" "),e("h1",{attrs:{id:"用一个代理去代理另一个代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用一个代理去代理另一个代理"}},[s._v("#")]),s._v(" 用一个代理去代理另一个代理")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(" target = {\n            id: 'target'\n        }\n        const handler = {\n            get(IsTarget, property, receiver ) {\n                console.log('firstProxy')\n                return Reflect.get(...arguments)\n            }\n        }\n        const firstProxy = new Proxy(target, handler)\n\n        const endProxy = new Proxy(firstProxy, {\n            get(IsTarget, property, receiver ) {\n                console.log('endProxy')\n                return Reflect.get(...arguments)\n            }\n        })\n        console.log(endProxy.id)\n\t\t// endProxy\n\t\t// firstProxy\n\t\t// target\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br")])]),e("h1",{attrs:{id:"get"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#get"}},[s._v("#")]),s._v(" get()")]),s._v(" "),e("ul",[e("li",[e("p",[e("code",[s._v("get()")]),s._v("捕获器会在获取属性值的操作中被调用。对应的反射 API 方法为 Reflect.get()。")])]),s._v(" "),e("li",[e("p",[e("code",[s._v("get()")]),s._v(" 返回值无限制，")])]),s._v(" "),e("li",[e("p",[e("code",[s._v("target")]),s._v("： 目标对象")])]),s._v(" "),e("li",[e("p",[e("code",[s._v("property")]),s._v("：目标对象的字符串键值")])]),s._v(" "),e("li",[e("p",[e("code",[s._v("receiver")]),s._v("：代理对象或者继承代理对象的对象")])])]),s._v(" "),e("h1",{attrs:{id:"set"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[s._v("#")]),s._v(" set()")]),s._v(" "),e("p",[s._v("set()捕获器会在设置属性值的操作中被调用。对应的反射 API 方法为 Reflect.set()。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const target = {}\n\n        const proxy = new Proxy(target, {\n            set(target, property, value, receiver) {\n                console.log('set()')\n                return Reflect.set(...arguments)\n            }\n        })\n        console.log(proxy.name = '张三')\n\n// set()\n// 张三\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("ul",[e("li",[e("p",[e("code",[s._v("target")]),s._v("：目标对象。")])]),s._v(" "),e("li",[e("p",[e("code",[s._v("property")]),s._v("：引用的目标对象上的字符串键属性。")])]),s._v(" "),e("li",[e("p",[e("code",[s._v("value")]),s._v("：新属性值。")])]),s._v(" "),e("li",[e("p",[e("code",[s._v("receiver")]),s._v("：接收最初赋值的对象。")])]),s._v(" "),e("li",[e("p",[s._v("返回值：返回 true 表示成功；返回 false 表示失败，严格模式下会抛出 TypeError")])]),s._v(" "),e("li",[e("p",[s._v("如果 target.property 不可写且不可配置，则不能修改目标属性的值")])])]),s._v(" "),e("p",[s._v("#has()")]),s._v(" "),e("p",[e("strong",[s._v("handler.has()")]),s._v(" 方法是针对 "),e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/in",target:"_blank",rel:"noopener noreferrer"}},[e("code",[s._v("in")]),e("OutboundLink")],1),s._v(" 操作符的代理方法。")]),s._v(" "),e("p",[e("code",[s._v("in:")]),s._v(" 如果指定的属性在指定的对象或其原型链中，则**"),e("code",[s._v("in")]),s._v(" 运算符**返回"),e("code",[s._v("true")]),s._v("。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const target = {}\n\n       const proxy = new Proxy(target, {\n           has(target, prop) {\n               console.log('has()')\n               return Reflect.has(...arguments)\n           }\n       })\n       console.log('name' in proxy) // false\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("ul",[e("li",[e("p",[e("code",[s._v("target")]),s._v("：目标对象.")])]),s._v(" "),e("li",[e("p",[e("code",[s._v("prop")]),s._v("：需要检查是否存在的属性.")])]),s._v(" "),e("li",[e("p",[e("code",[s._v("has")]),s._v(" has()必须返回布尔值，表示属性是否存在。")])])]),s._v(" "),e("h1",{attrs:{id:"apply"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#apply"}},[s._v("#")]),s._v(" apply()")]),s._v(" "),e("p",[e("strong",[s._v("handler.apply()")]),s._v(" 方法用于拦截函数的调用。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function sum(a, b) {\n        return a + b;\n        }\n\n        const handler = {\n        apply: function(target, thisArg, argumentsList) {\n            console.log(`apply ${argumentsList}`);\n            return target(argumentsList[0], argumentsList[1]) * 10;\n        }\n        };\n\n        const proxy = new Proxy(sum, handler);\n\n        console.log(sum(1, 2)); // => 3\n        console.log(proxy(1, 2)); // => 30\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br")])]),e("ul",[e("li",[e("p",[e("code",[s._v("target")]),s._v(":目标对象（函数）。")])]),s._v(" "),e("li",[e("p",[e("code",[s._v("thisArg")]),s._v(":被调用时的上下文对象。")])]),s._v(" "),e("li",[e("p",[e("code",[s._v("argumentsList")]),s._v(":被调用时的参数数组。")])]),s._v(" "),e("li",[e("p",[s._v("返回值：apply方法可以返回任何值。")])])])])}),[],!1,null,null,null);n.default=t.exports}}]);