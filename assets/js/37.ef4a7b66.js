(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{654:function(s,e,n){"use strict";n.r(e);var a=n(15),t=Object(a.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"生命周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[s._v("#")]),s._v(" 生命周期")]),s._v(" "),n("h3",{attrs:{id:"生命周期钩子函数介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#生命周期钩子函数介绍"}},[s._v("#")]),s._v(" "),n("strong",[s._v("生命周期钩子函数介绍：")])]),s._v(" "),n("p",[n("strong",[s._v("是在生命周期中添加的一些函数，这些函数可以让开发者加入自己额外的逻辑。"),n("strong",[s._v("每个 Vue 实例在被创建时都要经过一系列的初始化过程。需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做")]),s._v("生命周期钩子")]),s._v("的函数，这给了用户在不同阶段添加自己的代码的机会。")]),s._v(" "),n("p",[n("strong",[s._v("演示")]),s._v("\n先引入vue.js，可以控制台查看执行顺序")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("<body>\n  <script src=\"https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\"><\/script>\n  <div id=\"app\" v-on:click=\"modefind\">\n    {{ message }} {{ count }}次\n  </div>\n  <script>\n    const vm = new Vue({\n      el: '#app',\n      data: {\n        message: '点击',\n        count: 0\n      },\n      // 初始化阶段，Vue的生命周期从创建一个Vue实例开始，之后Vue要进行初始化事件和初始化生命周期。\n      beforeCreate() {\n        console.log('before create', this.message) // ! beforeCreate,这个勾子函数执行在初始化之后，组件创建之前，还不能访问数据，所有data为空\n      }, \n      \n      created() {\n        console.log('created...', this.message) // ! created,这个勾子函数执行在组件创建完成之后立即调用，组件有了data对象，所有可以操作data\n      },\n      \n      // 挂载阶段，\n      beforeMount() {\n        console.log('before mount', this.$el) // ! vue在挂载前先执行beforeMount钩子函数,这个时候html还没有创建，data数据已经存在，虚拟的dom也已经创建\n      },\n\n      mounted() {\n        console.log('mounted...', this.$el) // ! vm.$el替换旧的el，切换掉原有的编译模板。完成页面的数据挂载后执行Mounted，这时可以操作数据和DOM了\n      },\n      // 更新阶段\n      beforeUpdate() {\n        console.log('before update') // ! 当数据更新之前调用beforeUpdate钩子函数，可以监听数据，但是不能在这里修改数据\n      },\n      updated() {\n        console.log('updated...') // ! 虚拟DOM重新渲染完成后执行的钩子函数，我们可以获取到新的数据\n      },\n      // 销毁阶段，\n      beforeDestroy() {\n        console.log('before destroy') // ! 当组件销毁之前我们还是可以获取到数据的，实例也完全可用，\n      },\n      destroyed() {\n        console.log('destroyed...') // ! 当组件销毁完成过后就不能操作DOM，所有的实例，子实例，事件监听器都会被解绑\n      },\n      methods: {\n        modefind() {\n          this.count += 1\n        }\n      }\n    })\n  <\/script>\n</body>\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br")])]),n("h2",{attrs:{id:"钩子函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#钩子函数"}},[s._v("#")]),s._v(" 钩子函数：")]),s._v(" "),n("p",[n("strong",[s._v("create 阶段：")])]),s._v(" "),n("ul",[n("li",[s._v("beforeCreate()：在实例初始化之后,进行数据侦听和事件/侦听器的配置之前同步调用。")]),s._v(" "),n("li",[s._v("created()：在实例创建完成后被立即同步调用，这时可以获取到选项中的 data 数据进行处理。")])]),s._v(" "),n("p",[n("strong",[s._v("mount 阶段：")])]),s._v(" "),n("ul",[n("li",[s._v("beforeMount()：在挂载开始之前被调用：相关的 "),n("code",[s._v("render")]),s._v(" 函数首次被调用。")]),s._v(" "),n("li",[s._v("mounted()：实例被挂载后调用，这时 "),n("code",[s._v("el")]),s._v(" 被新创建的 "),n("code",[s._v("vm.$el")]),s._v(" 替换了")])]),s._v(" "),n("p",[n("strong",[s._v("update 阶段：")])]),s._v(" "),n("ul",[n("li",[s._v("beforeUpdate()：在数据发生改变后，DOM 被更新之前被调用。这里适合在现有 DOM 将要被更新之前访问它，比如移除手动添加的事件监听器。")]),s._v(" "),n("li",[s._v("updated()：在数据更改导致的虚拟 DOM 重新渲染和更新完毕之后被调用。")])]),s._v(" "),n("p",[n("strong",[s._v("destroy 阶段：")])]),s._v(" "),n("p",[s._v("通常在销毁阶段，会销毁的资源：已启动的定时器、未完成的网络请求、手动绑定的事件、释放 socket 连接等...")]),s._v(" "),n("ul",[n("li",[s._v("beforeDestroy()：实例销毁之前调用。")]),s._v(" "),n("li",[s._v("destroyed()：实例销毁后调用。该钩子被调用后，对应 Vue 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。")])]),s._v(" "),n("p",[n("strong",[s._v("还有两个钩子函数keep-alive阶段")])]),s._v(" "),n("p",[n("code",[s._v("keep-alive")]),s._v(" 是 Vue 提供的一个组件，用于缓存不活动的组件实例，而不是销毁它们。")]),s._v(" "),n("ul",[n("li",[s._v("activated()：被 keep-alive 缓存的组件激活时调用。")]),s._v(" "),n("li",[s._v("deactivated()：被 keep-alive 缓存的组件失活时调用。")])]),s._v(" "),n("p",[s._v("**errorCaptured : **    在捕获一个来自后代组件的错误时被调用。\n##参考：\n"),n("a",{attrs:{href:"https://cn.vuejs.org/v2/guide/instance.html#%E5%AE%9E%E4%BE%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90",target:"_blank",rel:"noopener noreferrer"}},[s._v("vue.js官网生命周期介绍"),n("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=t.exports}}]);